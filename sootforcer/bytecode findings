So observations and tricks:



Common operations:

Initiating:
A long, int or float.        All 2 bytecode                 (just the assignment)
A long[], int[] or float[]   All 2 bytecode + the array size

A long[] of size 32 using rc.getTeamMemory()     2 bytecode    <--- way cheaper than other array initiation techniques if you dont neccessarily care whats in the variables
See bytecode hacks for even better tech




Assigning:
An assignment of a variable seems to take 2 bytecodes, regardless of a lot of factors
For example:
int i = 0;
int i = d;
int i = Class.var;   (static)
float[] f = Class.var; (static)
Class.var = i;   (static)
Basically 1 bytecode for putting a variable on the stack, then 1 to put into another variable
If were assigning or reading from an object however, we need an extra bytecode. So:
object.i = j;     3 bytecode
i = object.j;   3 bytecode
object.i = object.j;  4 bytecode

Since there's an extra cost, if an objects variable is used often, it helps to store it in a temp variable.
You lose 3 bytecode on the temp storage write, but gain 1 bytecode per usage.
So:
- If the expected uses of an objects variable are <3, dont put it in a temp variable
- If the expected uses of an objects variable are 3, it doesnt matter
- If the expected uses of an objects variable are >3, put it in a temp variable
- In general, prevent usages of objects, especially singletons, whenever possible. It is however not that big of a deal to use an object, if it allows gains somewhere else or is significantly more readable/usable.


Of course, if you also always perform the same manipulation on the object, it may already become better at 2 usages



Assigning and reading from inside an array has a small cost:
int i = array[0];      4 bytecodes
int i = array[j];       4 bytecodes
array[0] = 5;         4 bytecodes
In the first case, it's 3 bytecode to put the variable on the stack, 1 to assign
No difference if using:
int i = array[j];   4
array[j] = 5;      4
General rules here:
- If the expected uses of an arrays value are <2, dont put it in a temp variable  (you waste 2 bytecode)
- If the expected uses of an arrays value are 2, it doesnt matter
- If the expected uses of an arrays value are >2, put it in a temp variable  (you waste 2 bytecode per execution above 2)

- If possible, avoiding arrays entirely and using a bunch of variables instead is preferable if that's easy to do








Calling a method
A static method costs 1 bytecode
An objects method costs 2
Add extra bytecodes for every parameter (2?)
So inline methods whenever reasonable


ifs, the latter check does not check towards bytecode count if not executed
 boolean variable check by itself costs 2
 theres no overhead on using  '!'
if(bool)   2 bytecode
if(!bool)   2 bytecod
if(true && true)    4 bytecode
if(true && false)    4 bytecode
if(false && true)    2 bytecode
if(true || true)    2 bytecode
if(true || false)    2 bytecode
if(false || true)    4 bytecode
if(false || false)    4 bytecode
So general rule:
For ands, put the check most likely to fail first.
For ors, put the check most likely to succeed first.

There's a possible alternative in  java.lang.Boolean.logicalAnd      en  logicalOr
This has a worst case of only 3 bytecode, in contrast to 4. However, its best and worst case are the same
So it may be worth using if you expect to see the worst case most of the time (for instance, with an 'and' where you expect to be true most of the time)


basically just 1 for any form of comparison, 1 for the variables loaded in, 1 for extra calculations:
if(i == 1) 3 bytecode                    an alternative may also be   Intrinsics.areEqual(1,k). also 3 bytecodes in this form.  but in the form    boolean b=  Intrinsics.areEqual(1,k);  it's cheaper than boolean b = 1==k;
if(i != 1) 3 bytecode
if(i < 1) 3 bytecode
if(i <= 1) 3 bytecode
if(i >= 1) 3 bytecode
if(i > 1) 3 bytecode
if(i % 2 == 1) 5 bytecode
constant 0 checks  have a shortcut bytecode
if(i == 0)  2 bytecode
if(i >= 0)  2 bytecode
if(i <= 0)  2 bytecode
if(i % 2 == 0) 4 bytecode
if(i % 2 != 0) 4 bytecode

There's no noticeable advantage/disadvantage of using:
i =  k == 0 ? 0 : 1
 over
 if(k ==0) i = 0;
 else i = 1;

although perhaps in some cases the obvious ?: usage may be better/worse than the obvious if



Multiplying etc.
The assignment itself always takes 2 bytecodes. Beyond that, an operation also seems to take 2.
So in total:
i= i+2;    = 4 bytecode         but   i = Math.addExact(i,2)   3 bytecode                 or if floats,  f = Float.sum(f1,f2)  3 bytecode,   for doubles Double.sum
i= i/2;    = 4 bytecode         but   i = Math.floorDiv(i,2)   3 bytecode
i= i*2;    = 4 bytecode         but   i = Math.multiplyExact(i,2)   3 bytecode
i= i-2;    = 4 bytecode         but   i= Mth.subtractExact(i,2)  3 bytecode
i= i%2;    = 4 bytecode         but   i = Math.floorMod(i,2)   3 bytecode
i= i+2*k;  = 6 bytecode         but   i = Math.multiplyExact(Math.addExact(i,2),k);   4 bytecode
i++   =  1 bytecode          (math.increment not worth using)
i+=2 = 1 bytecode
i= i +k;   4 bc
i += k;   4 bc      but   i = Math.addExact(i,k)   3 bytecode            or if floats,  f = Float.sum(f,f2)  3 bytecode,   for doubles Double.sum

So it seems that using these methods is generally much cheaper. Seemingly because there's a 0 bytecost overhead on the actual operation, so were just loading variables and storing
They can only be used for ints and longs though. For floats we only have Float.sum, which unfortunately doesn't allow cheaper subtraction (so youd have to prestore a negative number). It does improve += though.

It's also not always so straight forward. For example:
int asdasdgsd = k+2*4;    =  4 bytecode
int sdg = Math.multiplyExact(Math.addExact(k,2),4);   = 4 bytecode

looking at the exact bytecodes here:
    Old fashioned:
iload10
bipush 8
iadd
istore19
    Math.  methods
iload10
iconst_2
invokestatic java/lang/Math addExact((II)I);
iconst_4
invokestatic java/lang/Math multiplyExact((II)I);
istore20

Which makes it even weirder. It looks like the invokestatic here on these functions just costs 0.
k + 2*4 is simplified to k+8 in the old fashioned case. so, the old fashioned way may be faster using these kind of staple constants


Bitwise:
bitwise operations appear to have the same costs
i = i >>> 18;   4 bytecode
in some cases, there are again Math.multiplyExact() or Math.floorDiv() equivalents that are functionally the same
Careful though, they work differently with signed/unsigned thing



Loops:
The standard method
for(int i =0 ; i < 10; i++){}
Uses 2 to set it up, and 5 per loop

The downwards method is clearly better
for(int i =9 ; i >= 0; i--){}
Uses 2 to set it up, and 4 per loop

Difference is not as big if we go up to a variable, since we need to do -1, but still wins out with longer loops
for(int i =0 ; i < j; i++){}     2 for setup, 5 per loop
for(int i =j-1 ; i >= 0; i--){}    4 for setup, 4 per loop
Of course, in some cases there's a meaningful difference between starting one way or the other. Many of the scans have the
closest things up front
It's also noteworthy that
for(int i =0 ; i < j; i++){}    takes 1 less bytecode per loop than
for(int i =0 ; i < array.size; i++){}        so, it's better to set a size variable outside

a for(float f : floats)  construction takes more bytecode
int i = 10; while(--i >= 0){        }     this also takes more for some reason

If we don't care about the iterator, we can even do a construction without iterator that takes less bytecodes
java.io.StringReader c = new java.io.StringReader("12345A");   //so will loop 6 times
while(c.read() >= 0){}
Requires 6 to set it up, 3 per loop

or, if we predefine a stringreader
c.reset()
while(c.read() >= 0){}
This requires 3 to set it up, 3 per loop  and an additional 6 at the start of the program somewhere


Strings:
s = s + k     8bytecodes
s += k     8 bytecodes
builder.append(k)  4 bytecode           (note, dont accidentally pick the scala version, use the java.lang one)
buffer.append(k)   4 bytecode
kotlin.stringskt.append   32 bytecode, aww yeah
scala.append   12 bytecode
s = Intrinsics.stringPlus(s,k);      3 bytecode     !! winner. and also works with ints etc


string.indexof is very cheap o(1) in bytecode terms, and usable to create string-based arrays that are searchable
string.format is pretty cheap too and usable to keep the indexes predictable (allows you to match them up to an actual array)

Instrinsics.areEqual(s,k)    (3 bytecode) is cheaper than     s.equals(k)    (5 bytecode)





Broadcasting:
Broadcasting and receiving two ints, traditional method = 41 bytes    receiving only: 15
Broadcasting and receiving two ints, reusable method = 42 bytes   receiving only: 21
Broadcasting and receiving three ints, traditional method = 62 bytes   receiving only: 23
Broadcasting and receiving three ints, reusable method = 57 bytes    receiving only: 32
Broadcasting and receiving four ints, traditional method = 83 bytes    receiving only:  31
Broadcasting and receiving four ints, reusable method = 72 bytes     receiving only: 41

So, bytecode wise there's only an advantage if it's a broadcasting-heavy function with more than 2 ints.



Broadcast array:
Rather heavy operations.
Push: 46
Set: 38
getAll: depends on size, 100+
clear: 15
get: 15




So the string based array thing is amazing at bytecode efficiency for finding something in an array.



Random:
The standard random functions such as those in the Random class are too expensive to be reasonably used (30+)
Effective alternatives can involve variables such as the remaining clock time, the turn time, etc.
A rather good one, taking only 2 bytecodes:
int rand = Math.floorMod(Math.addExact( Clock.getBytecodeNum(),Math.addExact( Clock.getBytecodesLeft(),    Math.multiplyExact(Clock.getBytecodeNum(), Math.floorDiv(Math.addExact(Math.multiplyExact(Clock.getBytecodesLeft(), Clock.getBytecodeNum()), Clock.getBytecodeNum()),Clock.getBytecodesLeft())))) , 256);
This gives a rand number between 0 and whatever number is placed at the end
it doesn't work for very high numbers though, and the distribution may not be perfect. other downside is that it only works as a truly random thing if it's placed after
a variable amount of bytecodes are used. if this is an issue, put   a reference to turn somewhere in the function


